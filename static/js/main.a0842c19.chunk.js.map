{"version":3,"sources":["images/St.Basils_Cathedral_Moscow.jpg","components/status-messages/status-messages-component.jsx","components/home-view/home-view-component.jsx","apiConfig.js","models/data-model.js","components/signup-view/signup-view-component.jsx","store.js","components/signin-view/signin-view-component.jsx","components/change-password-view/change-password-view-component.jsx","components/options-view/options-view-component.jsx","components/cyrillic-keyboard/cyrillic-keyboard-component.jsx","components/flashcards-views/create-flashcard-view-component.jsx","components/flashcards-views/delete-flashcard-view-component.jsx","components/flashcards-views/update-flashcard-view-component.jsx","components/flashcards-views/view-flashcards-view-component.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","StatusMessages","message","className","HomeView","displayStatusMessageMethod","history","this","variant","Container","Row","Col","src","flag","alt","width","height","Button","onClick","push","React","Component","apiUrls","apiUrl","window","location","hostname","FlashcardsDataModel","createAccount","email","password","confirmationPassword","data","axios","post","changePassword","oldPassword","newPassword","token","method","url","headers","createFlashcard","russianWord","englishWord","deleteFlashcard","flashcardId","getAllFlashcards","logout","signin","updateFlashcard","SignupView","componentDidMount","handleSubmit","event","a","preventDefault","dataModel","state","confirmation_password","handleEmailChange","setState","target","value","handlePasswordChange","handleConfirmationPasswordChange","Form","onSubmit","Group","controlId","Label","Control","type","onChange","placeholder","disabled","store","SigninView","response","user","ChangePasswordView","old_password","new_password","handleOldPasswordChange","handleNewPasswordChange","OptionsView","exitTheApp","CyrillicKeyboard","keyboardPressHandler","e","textContent","CreateFlashcardView","cyrillicInput","englishInput","handleCyrillicKeyboardClick","cyrillicCharacter","newCyrillicInput","slice","handleEmptyCyrillicOnChange","handleEnglishKeyboardChange","handleOnBlur","keyboardDisableState","name","disableCyrillicKeyboard","handleOnFocus","onBlur","onFocus","props","DeleteFlashcardView","flashcards","handleFlashcardSelected","selectedElement","tagName","parentElement","selectedFlashcard","words","innerText","split","console","log","trim","id","filteredFlashcards","filter","currentFlashcard","_id","map","key","UpdateFlashcardView","flashcard","ViewFlashcardsView","handleCheckAnswerButton","flashcardNumberCurrentlyShown","checkButtonDisabled","nextButtonDisabled","radioButtonsDisabled","shouldCheckButtonBeDisabled","handleNextButton","length","statusMessage","currentEnglishWord","currentRussianWord","selectedLanguage","startButtonDisabled","handleLanguageOptionChange","buttonState","Check","inline","label","checked","App","displayStatusMessage","path","render","exact","Boolean","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a0842c19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/St.Basils_Cathedral_Moscow.03b322f3.jpg\";","////////////////////////////////////////////////////////////////////////////////\n//\n// status-messages-component.jsx\n//\n// This React component implements the view of the Russian Flashcards\n// application that is always shown to the user and from which the user can\n// see status messages from the application.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React from 'react';\n\n\n\n\n// Implements the StatusMessages component.\n//\n// message - The message to be displayed in the status message component.\n//\n//\nconst StatusMessages = ({message}) => {\n\n    return (\n        <p className=\"status-notification-message-area\">{message}</p>\n    );\n}\n\n\nexport default StatusMessages","////////////////////////////////////////////////////////////////////////////////\n//\n// home-view-component.jsx\n//\n// This React component implements the home view of the Russian Flashcards\n// application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\n// This informs webpack to use this image.\n// https://create-react-app.dev/docs/adding-images-fonts-and-files\nimport flag from './../../images/St.Basils_Cathedral_Moscow.jpg';\n\n\n\n\n// Implements the view Home view.\nclass HomeView extends React.Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        super();\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount() {\n        this.displayStatusMessageMethod('Welcome to Russian Flashcards /' + \n            'добро пожаловать в карточки на русском');\n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n\n        return (\n            <section className=\"buttons__actions\" variant=\"primary\">\n                <Container>\n                    <Row>\n                        <Col>\n                        <div className=\"div--centered-content\">\n                            <img src={ flag } alt=\"St. Basils_Cathedral_Moscow\"\n                                 width=\"648\" height=\"420\" />\n                        </div>                    \n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <div className=\"div--centered-content\">\n                                <Button className=\"button__action\"\n                                        onClick={() => this.history.push('/signup')}>\n                                    Create Account / Зарегистрироваться\n                                </Button>\n                                <Button className=\"button__action\" variant=\"primary\"\n                                        onClick={() => this.history.push('/signin')}>\n                                    Sign In / Войти\n                                </Button> \n                            </div>\n                        </Col>\n                    </Row>                \n                </Container>  \n            </section>\n        );\n    };\n}\n\n\nexport default HomeView","let apiUrl\nconst apiUrls = {\n  production: ' https://russian-flashcards-webapi.herokuapp.com',\n  development: 'http://localhost:4741'\n}\n\nif (window.location.hostname === 'localhost') {\n  apiUrl = apiUrls.development\n} else {\n  apiUrl = apiUrls.production\n}\n\nexport default apiUrl\n","////////////////////////////////////////////////////////////////////////////////\n//\n// data-model.js\n//\n// This module implements a data access strategy pattern. It adds a layer of \n// abstraction for the React components because they need not concern\n// themselves with data access. This also allows us to change the tech without\n// breaking the React components. Today we are using Axios; we can change to\n// something else tomorrow.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport axios from 'axios'\n\n\n// This is General Assembly code that I added to my project. This config file\n// contains the URLs for data access.\nimport apiUrl from './../apiConfig'\n\n\n\n\n// Implements a data acccess stragegy for Russian Flashcards.\n//\nclass FlashcardsDataModel {\n\n    // Allows the user to logout of Russian Flashcards by invoking the\n    // webservice for logging out. \n    //\n    // email - The user's email used as their ID in the Russian Flashcards app.\n    // password - The user's password.\n    //\n    createAccount = (email, password, confirmationPassword) => {\n\n        const data = {\n            \"credentials\": {\n                \"email\": email,\n                \"password\": password,\n                \"password_confirmation\": confirmationPassword\n            }\n        }; \n\n        // Return the promise to the caller.\n        return axios.post(`${apiUrl}/sign-up`, data);\n    };\n\n\n    // Allows the user to change their password by invoking the\n    // webservice for changing a password. \n    //\n    // oldPassword - The password to be changed.\n    // newPassword - The password to replace oldPassword.\n    // token - A JSON web token used for authorization to the web service.\n    //\n    changePassword = (oldPassword, newPassword, token) => {\n\n        const data =  {\n            \"passwords\": {\n              \"old\": oldPassword,\n              \"new\": newPassword\n            }\n        }\n\n        // Return the promise to the caller.\n        return axios({\n            method: 'patch',\n            url: `${apiUrl}/change-password`,\n            headers: {'Authorization': `Bearer ${token}`},\n            data: data\n        });\n    };\n\n\n    // Allows the user to delete a flashcard by invoking the\n    // webservice for creating a flashcard. \n    //\n    // russianWord - The Russian word to be saved to a flashcard.\n    // newPassword - The English word to be saved to a flashcard.\n    // token - A JSON web token used for authorization to the web service.\n    //\n    createFlashcard = (russianWord, englishWord, token) => {\n\n        const data =  {\n            \"flashcard\": {\n              \"englishWord\": englishWord,\n              \"russianWord\": russianWord\n            }\n        }\n\n        // Return the promise to the caller.\n        return axios({\n            method: 'post',\n            url: `${apiUrl}/flashcards`,\n            headers: {'Authorization': `Bearer ${token}`},\n            data: data\n        });\n    };    \n\n\n    // Allows the user to get all flashcards by invoking the\n    // webservice for index. \n    //\n    // flashcardId - The id of the flashcard to delete.\n    // token - A JSON web token used for authorization to the web service.\n    //\n    deleteFlashcard = (flashcardId, token) => {\n\n        // Return the promise to the caller.\n        return axios({\n            method: 'delete',\n            url: `${apiUrl}/flashcards/${flashcardId}`,\n            headers: {'Authorization': `Bearer ${token}`}\n        });\n    };\n\n\n    // Allows the user to get all flashcards by invoking the\n    // webservice for index. \n    //\n    // token - A JSON web token used for authorization to the web service.\n    //\n    getAllFlashcards = (token) => {\n\n        // Return the promise to the caller.\n        return axios({\n            method: 'get',\n            url: `${apiUrl}/flashcards`,\n            headers: {'Authorization': `Bearer ${token}`}\n        });\n    };\n\n\n    // Allows the user to logout of Russian Flashcards by invoking the\n    // webservice for logging out. \n    //\n    // token - A JSON web token used for authorization to the web service.\n    //\n    logout = (token) => {\n\n        // Return the promise to the caller.\n        return axios({\n                  method: 'delete',\n                  url: `${apiUrl}/sign-out`,\n                  headers: {'Authorization': `Bearer ${token}`}\n        });\n    };\n\n\n    // Allows the user to logout of Russian Flashcards by invoking the\n    // webservice for logging out. \n    //\n    // email - The user's email used as their ID in the Russian Flashcards app.\n    // password - The user's password.\n    //\n    signin = (email, password) => {\n\n        const data = {\n            \"credentials\": {\n                \"email\": email,\n                \"password\": password\n            }\n        }; \n\n        // Return the promise to the caller.\n        return axios.post(`${apiUrl}/sign-in`, data);\n    };\n\n\n    // Allows the user to update a flashcard by invoking the\n    // webservice for creating a flashcard. \n    //\n    // flashcardId - The id of the flashcard to update.\n    // russianWord - The Russian word to be udated in a flashcard.\n    // englishWord - The English word to be updated in a flashcard.\n    // token - A JSON web token used for authorization to the web service.\n    //\n    updateFlashcard = (flashcardId, russianWord, englishWord, token) => {\n\n        const data =  {\n            \"flashcard\": {\n              \"englishWord\": englishWord,\n              \"russianWord\": russianWord\n            }\n        }\n\n        // Return the promise to the caller.\n        return axios({\n            method: 'patch',\n            url: `${apiUrl}/flashcards/${flashcardId}`,\n            headers: {'Authorization': `Bearer ${token}`},\n            data: data\n        });\n    };   \n}\n\n\nexport default FlashcardsDataModel;","////////////////////////////////////////////////////////////////////////////////\n//\n// signup-view-component.jsx\n//\n// This React component implements the signup view of the Russian Flashcards\n// application. \n//\n////////////////////////////////////////git ////////////////////////////////////////\n\n\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport FlashcardsDataModel from './../../models/data-model';\n\n\n\n// Implements the Signup view.\n//\nclass SignupView extends React.Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        super();\n\n        this.state = {\n            email: '',\n            password: '',\n            confirmation_password: ''\n        }\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod('Signup for Russian Flashcards');\n    }    \n\n\n    // Handles the form submission which in turn invokes the web service to\n    // signup for the app. If successful, then we navigate to the options view.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            await this.dataModel.createAccount(this.state.email,\n                this.state.password, this.state.confirmation_password);\n\n            this.history.push('/signin');\n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // Handles the typing from the user in the password input field.\n    //\n    // event - A React synthetic event that represents a change in the password\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handleEmailChange = (event) => {\n        this.setState({email: event.target.value})\n    };\n\n\n    // Handles the typing from the user in the password input field.\n    //\n    // event - A React synthetic event that represents a change in the password\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handlePasswordChange = (event) => {\n        this.setState({password: event.target.value})\n    };\n\n\n    // Handles the typing from the user in the confirmation password input\n    // field.\n    //\n    // event - A React synthetic event that represents a change in the password\n    //         confirmation input field when the user types. This is needed for\n    //         controlled form elements. \n    //\n    handleConfirmationPasswordChange = (event) => {\n        this.setState({confirmation_password: event.target.value})\n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n\n        return (\n            <section className=\"input__controls\">\n                <Form className=\"auth-form\" onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"email-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    Email / электронная почта\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              onChange={ this.handleEmailChange }  \n                                              value={this.state.email}\n                                              placeholder='email' />\n                            </Form.Group>\n                            <Form.Group controlId=\"password-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    Password / Пароль\n                                </Form.Label>\n                                <Form.Control type=\"password\" \n                                              onChange={ this.handlePasswordChange }  \n                                              value={this.state.password}\n                                              placeholder='password' />                                           \n                            </Form.Group>\n                            <Form.Group controlId=\"password-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    Password Confirmation / Подтвердите Пароль\n                                </Form.Label>\n                                <Form.Control type=\"password\" \n                                              onChange={ \n                                                  this.handleConfirmationPasswordChange\n                                              }  \n                                              value={this.state.confirmation_password}\n                                              placeholder='confirm password' />                                           \n                            </Form.Group>                            \n                        </Col>\n                    </Row>\n                    <Row className=\"buttons__actions\">\n                        <Button type=\"submit\" variant=\"primary\"\n                                disabled={this.state.email === '' ||\n                                          this.state.password === '' ||\n                                          this.state.confirmation_password === ''}\n                                className=\"button__action\" >\n                            Sign Up / Войти\n                        </Button>\n                        <Button variant=\"primary\" className=\"button__action\"\n                                onClick={() => this.history.push('/')} >\n                            Return / вернуться\n                        </Button>                                                                \n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default SignupView","\n\nconst store = {\n};\n\n\nexport default store;\n","////////////////////////////////////////////////////////////////////////////////\n//\n// signin-view-component.jsx\n//\n// This React component implements the signin view of the Russian Flashcards\n// application. \n//\n////////////////////////////////////////git ////////////////////////////////////////\n\n\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\n\n\n\n// Implements the Signin view.\n//\nclass SigninView extends React.Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        super();\n\n        this.state = {\n            email: '',\n            password: ''\n        }\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod('Signin to Russian Flashcards');\n    }    \n\n\n    // Handles the form submission which in turn invokes the web service to\n    // sign into the app. If successful, then we navigate to the options view.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            const response = await this.dataModel.signin(this.state.email,\n                this.state.password);\n\n            // Save our user info to the store so that other API calls \n            // can gain access to the token.    \n            store.user = response.data.user;\n\n            this.history.push('/options');\n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // Handles the typing from the user in the password input field.\n    //\n    // event - A React synthetic event that represents a change in the password\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handleEmailChange = (event) => {\n        this.setState({email: event.target.value})\n    };\n\n\n    // Handles the typing from the user in the email input field.\n    //\n    // event - A React synthetic event that represents a change in the email\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handlePasswordChange = (event) => {\n        this.setState({password: event.target.value})\n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n\n        return (\n            <section className=\"input__controls\">\n                <Form className=\"auth-form\" onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"email-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    Email / электронная почта\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              onChange={ this.handleEmailChange }  \n                                              value={this.state.email}\n                                              placeholder='email' />\n                            </Form.Group>\n                            <Form.Group controlId=\"password-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    Password / Пароль\n                                </Form.Label>\n                                <Form.Control type=\"password\" \n                                              onChange={ this.handlePasswordChange }  \n                                              value={this.state.password}\n                                              placeholder='password' />                                           \n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                    </Row>\n                    <Row className=\"buttons__actions\">\n                        <Button type=\"submit\" variant=\"primary\"\n                                disabled={this.state.email === '' ||\n                                          this.state.password === ''}\n                                className=\"button__action\" >\n                            Sign In / Войти\n                        </Button>\n                        <Button variant=\"primary\" className=\"button__action\"\n                                onClick={() => this.history.push('/')} >\n                            Return / вернуться\n                        </Button>                                                                \n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default SigninView","////////////////////////////////////////////////////////////////////////////////\n//\n// change-password-view-component.jsx\n//\n// This React component implements the change password view of the Russian \n// Flashcards application. \n//\n////////////////////////////////////////git ////////////////////////////////////////\n\n\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\n\n\n\n// Implements the change password view.\n//\nclass ChangePasswordView extends React.Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        super();\n\n        this.state = {\n            old_password: '',\n            new_password: ''\n        }\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod('Change password');\n    }    \n\n\n    // Handles the form submission which in turn invokes the web service to\n    // change the password. If successful, then we navigate to the options view.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            await this.dataModel.changePassword(this.state.old_password,\n                this.state.new_password, store.user.token);\n\n            this.history.push('/options');\n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // Handles the typing from the user in the old password input field.\n    //\n    // event - A React synthetic event that represents a change in the old password\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handleOldPasswordChange = (event) => {\n        this.setState({old_password: event.target.value})\n    };\n\n\n    // Handles the typing from the user in the new password input field.\n    //\n    // event - A React synthetic event that represents a change in the new password\n    //         input field when the user types. This is needed for controlled\n    //         form elements. \n    //\n    handleNewPasswordChange = (event) => {\n        this.setState({new_password: event.target.value})\n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n\n        return (\n            <section className=\"input__controls\">\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"email-text\" >\n                                <Form.Label>\n                                    Old Password\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              onChange={ this.handleOldPasswordChange }  \n                                              value={this.state.old_password}\n                                              placeholder='English' />\n                            </Form.Group>\n                            <Form.Group controlId=\"password-text\" >  \n                                <Form.Label>\n                                    New Password\n                                </Form.Label>\n                                <Form.Control type=\"password\" \n                                              onChange={ this.handleNewPasswordChange }  \n                                              value={this.state.new_password}\n                                              placeholder='password' />                                           \n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row className=\"buttons__actions\">\n                        <Button type=\"submit\" variant=\"primary\"\n                                disabled={this.state.old_password === '' ||\n                                          this.state.new_password === ''}\n                                className=\"button__action\" >\n                            Change Password\n                        </Button>\n                        <Button variant=\"primary\" className=\"button__action\"\n                                onClick={() => this.history.push('/options')} >\n                            Return / вернуться\n                        </Button>                                                                \n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default ChangePasswordView","////////////////////////////////////////////////////////////////////////////////\n//\n// options-view-component.jsx\n//\n// This React component implements the options view of the Russian Flashcards\n// application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\nimport './options-view-component.scss';\n\n\n\n// Implements the Options view.\n//\n\n//\nclass OptionsView extends React.Component {\n\n    // displayStatusMessageMethod - A callback function to a method that can display\n    //                              messages to a status message area.\n    // history - the history object from React router.\n    //\n    constructor({displayStatusMessageMethod, history}) {\n        super();\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;        \n        this.dataModel = new FlashcardsDataModel();\n    };\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod('Please select an option from the choices below:');\n    };\n\n\n    exitTheApp = async () => {\n\n        try {\n            await this.dataModel.logout(store.user.token);\n\n            // Reset the user in the store.   \n            store.user = {};\n\n            this.displayStatusMessageMethod(\n                'You have successfully exited Russian Flashcards');\n\n            this.history.push('/');\n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n    \n    \n    // A React.js lifecycle method that renders the component.\n    //    \n    render() {\n        return(\n            <section className=\"options__buttons\">\n                <Button variant=\"primary\"\n                        onClick={() => this.history.push('/view-flashcards')}>\n                            View Flashcards / Просмотр карточек\n                </Button>\n                <Button variant=\"primary\" className=\"options__button--spaced-top\"\n                        onClick={() => this.history.push('/create-flashcard')}>\n                            Create Flashcard / Создать карточку\n                </Button> \n                <Button variant=\"primary\"\n                        onClick={() => this.history.push('/update-flashcard')}>\n                            Update Flashcard / Обновить карточку\n                </Button> \n                <Button variant=\"primary\"\n                        onClick={() => this.history.push('/delete-flashcard')}>\n                            Delete Flashcard / Удалить карточк\n                </Button> \n                <Button variant=\"primary\" className=\"options__button--spaced-top\"\n                        onClick={() => this.history.push('/change-password')}>\n                            Change Password / Изменить пароль\n                </Button>             \n                <Button variant=\"primary\" className=\"options__button--spaced-top\"\n                        onClick={this.exitTheApp}>\n                            Exit / Выход  из программы\n                </Button>                                                \n            </section>\n        );\n    };\n}; \n\n\nexport default OptionsView","////////////////////////////////////////////////////////////////////////////////\n//\n// cyrillic-keyboard-component.jsx\n//\n// This React component implements a Cyrillic keyboard.\n//\n// This component takes a callback function, keyboardPressHandler, and \n// translates Cyrillic keyboard synthetic events and extracts the Cyrillic\n// character. It then passes that character as an argument to\n// keyboardPressHandler. This allows this components to be reused in any web\n// view because it is the decision of a parent component what to do with the\n// keypress value.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nimport './cyrillic-keyboard-component.scss';\n\n\n\n\n// This function handles synthetic click events from the Cyrillic keyboard and\n// extracts the Cyrillic character of the key. It then passes it to a callback \n// passed by a parent component, and the parent component decides what to do \n// with the character.\n//\n// - disabled - A boolean value that when true disables the keyboard. When\n//              false the keyboard is once again usable.\n// - keyboardPressHandler - A callback from a parent component that takes a\n//                          Cyrillic character as an argument.\n// \n// We are destructuring the props property.\n//\nconst CyrillicKeyboard = ({disabled, keyboardPressHandler}) => {\n\n    return (\n        <div className=\"cyrillic-soft-keyboard\">\n            { /* The top row of our Cyrillic soft keyboard. */}\n            <div className=\"cyrillic-soft-keyboard-row\">\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\" \n                        disabled={disabled}\n                        className=\"cyrillic__button\">ё</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\" \n                        disabled={disabled}\n                        className=\"cyrillic__button\">й</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\" \n                        disabled={disabled}\n                        className=\"cyrillic__button\">ц</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">у</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">к</Button>                \n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">е</Button>    \n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">н</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">г</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ш</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">щ</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">з</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">х</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ъ</Button>\n            </div>\n            { /* The 2nd row of our Cyrillic soft keyboard. */}\n            <div className=\"cyrillic-soft-keyboard-row\">\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ф</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ы</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">в</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">а</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">п</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">р</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">о</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">л</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">д</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ж</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button backspace-key \">\n                    назад\n                </Button>\n            </div>    \n            { /* The final row of our Cyrillic soft keyboard. */}\n            <div className=\"cyrillic-soft-keyboard-row\">\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">я</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ч</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">с</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">м</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">и</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">т</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ь</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">б</Button>\n                <Button onClick={e => keyboardPressHandler(e.target.textContent)}\n                        variant=\"danger\"\n                        disabled={disabled}\n                        className=\"cyrillic__button\">ю</Button>\n            </div>                  \n        </div> \n    );\n}\n\n\nexport default CyrillicKeyboard;","////////////////////////////////////////////////////////////////////////////////\n//\n// create-flashcard-view-component.jsx\n//\n// This React component implements the create flashcard view of the Russian\n// Flashcards application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport CyrillicKeyboard from '../cyrillic-keyboard/cyrillic-keyboard-component';\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\nimport './flashcards-views.scss'\n\n\n\n\n// Implements the Create Flashcard view.\nclass CreateFlashcardView extends Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        \n        super();\n\n        this.state = {\n            cyrillicInput: '',\n            englishInput: '',\n            disableCyrillicKeyboard: true\n        };\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod('Create a Flashcard');\n    }      \n\n\n    // Handles the form submission which in turn invokes the web service to\n    // create a flashcard. If successful, then we navigate to the options view.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            await this.dataModel.createFlashcard(this.state.cyrillicInput,\n                    this.state.englishInput, store.user.token);\n\n            this.displayStatusMessageMethod(\n                `The flashcard  - ${this.state.englishInput} / \n                ${this.state.cyrillicInput} -  was created successfully`);       \n                \n            this.setState({\n                englishInput: '',\n                cyrillicInput: ''\n            });    \n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // A callback method passed to the Cyrillic keyboard component that\n    // sets the state that represents a Russian word typed by the keyboard.\n    // It takes a Cyrillic character and adds it as a suffix to the state\n    // representing that word.\n    //\n    // cyrillicCharacter - a Cyrillic character typed by the CyrillicKeyboard\n    //                     component.\n    // \n    handleCyrillicKeyboardClick = cyrillicCharacter => {\n\n        let newCyrillicInput ;\n\n        // If we received the backspace character, then simply remove the \n        // last character from the existing russian word. Otherwise,\n        // suffix the new character to the end of the input.\n        if (cyrillicCharacter === 'назад') {\n            newCyrillicInput = this.state.cyrillicInput.slice(0, -1);\n        }\n        else {\n            newCyrillicInput = this.state.cyrillicInput + cyrillicCharacter;\n        }\n        this.setState({\n            cyrillicInput: newCyrillicInput,\n        });\n    };\n\n\n    // This is a do-nothing handler for the Cyrillic keyboard. Because that\n    // keyboard is a softkeyboard, it does not raise an onChange event.\n    // But React wants an onChange event otherwise we receive this error in the\n    // JS console: Warning: Failed prop type: You provided a `value` prop to a\n    // form field without an `onChange` handler. This will render a read-only\n    // field. If the field should be mutable use `defaultValue`. Otherwise, set\n    // either `onChange` or `readOnly`.\n    handleEmptyCyrillicOnChange = () => {};   \n\n\n    // Handles changes in the English input text control.\n    //\n    // event - A React synthetic event that has changes to the\n    //         English input field.\n    handleEnglishKeyboardChange = event => {\n        this.setState({\n            englishInput: event.target.value\n        });\n    };\n\n\n    handleOnBlur = event => {\n\n        let controlName = event.target.name;\n        let keyboardDisableState;\n        \n        if (controlName === \"english\") keyboardDisableState = false;\n        else keyboardDisableState = true;\n\n        this.setState({\n            disableCyrillicKeyboard: keyboardDisableState\n        });\n    };\n\n\n    handleOnFocus = event => {\n    \n        let controlName = event.target.name;\n        let keyboardDisableState;\n\n        if (controlName === \"english\") keyboardDisableState = true;\n        else keyboardDisableState = false;\n\n        this.setState({ \n            disableCyrillicKeyboard: keyboardDisableState\n        })\n    };   \n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n        \n        return (\n            <section className=\"input__controls\">\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"english-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    English\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              disabled={ false\n                                                  //this.state.selectedLanguage === 'russian'\n                                              }\n                                              name=\"english\"\n                                              onChange={\n                                                  this.handleEnglishKeyboardChange\n                                              }\n                                              onBlur={ this.handleOnBlur }\n                                              onFocus={ this.handleOnFocus }                                               \n                                              value={this.state.englishInput}\n                                              placeholder='English' />\n                            </Form.Group> \n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"russian-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    русский\n                                </Form.Label>\n                                <Form.Control type=\"text\" placeholder='русский'\n                                              disabled={ false }\n                                              name=\"russian\"\n                                              onChange={this.handleEmptyCyrillicOnChange}\n                                              onFocus={ this.handleOnFocus }\n                                              value={this.state.cyrillicInput}/>                                           \n                            </Form.Group>\n                        </Col>                                                   \n                    </Row>\n                    <Row>\n                        <Col>\n                            <CyrillicKeyboard disabled={ \n                                                this.state.disableCyrillicKeyboard\n                                              }\n                                              keyboardPressHandler={\n                                                this.handleCyrillicKeyboardClick\n                                              } />                            \n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"buttons__actions\">\n                            <Button variant=\"primary\" \n                                    type=\"submit\" \n                                    disabled={this.state.englishInput === '' ||\n                                              this.state.cyrillicInput === ''}\n                                    className=\"button__action\">\n                            Create Flashcard / Создать карточку\n                            </Button>\n                                <Button variant=\"primary\" className=\"button__action\"\n                                    onClick={() => this.props.history.push('/options')}>\n                                Return / вернуться\n                            </Button>   \n                        </Col>\n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default CreateFlashcardView\n\n","////////////////////////////////////////////////////////////////////////////////\n//\n// delete-flashcard-view-component.jsx\n//\n// This React component implements the delete flashcard view of the Russian\n// Flashcards application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport CyrillicKeyboard from '../cyrillic-keyboard/cyrillic-keyboard-component';\n\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\nimport './flashcards-views.scss'\n\n\n\n\n// Implements the Delete Flashcard view.\nclass DeleteFlashcardView extends Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        \n        super();\n\n        this.state = {\n            cyrillicInput: '',\n            englishInput: '',\n            flashcards: [],\n        };\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel(); \n        this.selectedFlashcard = null;\n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = async () => {\n        this.displayStatusMessageMethod('Delete a Flashcard');\n\n        try {\n            const response = \n                await this.dataModel.getAllFlashcards(store.user.token);\n\n            this.setState({flashcards: response.data.flashcards} );     \n        }   \n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }        \n    }      \n\n\n    // A callback method passed to the Cyrillic keyboard component that\n    // sets the state that represents a Russian word typed by the keyboard.\n    // It takes a Cyrillic character and adds it as a suffix to the state\n    // representing that word.\n    //\n    // cyrillicCharacter - a Cyrillic character typed by the CyrillicKeyboard\n    //                     component.\n    // \n    handleCyrillicKeyboardClick = cyrillicCharacter => {\n        this.setState({\n            cyrillicInput: this.state.cyrillicInput + cyrillicCharacter\n        });\n    };\n\n\n    // Handles changes in the English input text control.\n    //\n    // event - A React synthetic event that has changes to the\n    //         English input field.\n    handleEnglishKeyboardChange = event => {\n        this.setState({\n            englishInput: event.target.value\n        });\n    };\n\n\n    handleFlashcardSelected = event => {\n        \n        let selectedElement;\n        \n        // You can either click the SPAN or the parent DIV.\n        // Handle both cases.\n        if (event.target.tagName === 'SPAN') {\n            selectedElement = event.target.parentElement;\n        }\n        else {\n            selectedElement = event.target;\n        }\n\n        // This saves the flashcard database ID and the words.\n        // We need the ID when we save the updates.\n        this.selectedFlashcard = selectedElement;\n\n        // Our words are in a span element and appear as \n        // englishWord / russianWord.\n        const words = selectedElement.innerText.split('/');\n\n        console.log(words)\n        // Now use state databinding to load the words into the input fields.\n        this.setState({\n            englishInput: words[0].trim(),\n            cyrillicInput: words[1].trim()\n        });\n    };\n\n\n    // Handles the form submission which in turn invokes the web service to\n    // update a flashcard. \n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n\n            const id = this.selectedFlashcard.id;\n\n            await this.dataModel.deleteFlashcard(\n                id,\n                store.user.token\n            );\n\n            // Loop through our flashcards and find the flashcard that was \n            // updated. We need to update it. Since it is in state, the \n            // list of flashcards should re-render.\n            //\n            // TODO: Make this more efficient.\n            const flashcards = this.state.flashcards;\n\n            const filteredFlashcards = flashcards.filter( currentFlashcard => {\n\n                // Simply return every flashcard but the one to be deleted.\n                // Then we'll assign the filtered collection to state.\n                if (currentFlashcard._id !== id) return currentFlashcard;\n            });\n\n            // This will cause the flashcards to re-render since the state of \n            // one of the flashcards has changed.\n            this.state.flashcards = filteredFlashcards;\n\n            this.displayStatusMessageMethod(\n                `The flashcard  - ${this.state.englishInput} / \n                ${this.state.cyrillicInput} -  was updated successfully`);    \n                \n            this.setState({\n                cyrillicInput: '',\n                englishInput: ''\n            });    \n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };    \n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n        \n        return (\n            <section className=\"input__controls\">\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <div className=\"scrollable-flashcards\">\n                                {this.state.flashcards.map(currentFlashcard =>\n                                    <div key={ currentFlashcard._id }\n                                        //  Use the ID property to encode our flashcard so that we\n                                        // know which flashcard to update.\n                                        id={ currentFlashcard._id }\n                                        className=\"flashcard\"\n                                        onClick={this.handleFlashcardSelected}>\n                                        <span>\n                                            {currentFlashcard.englishWord} / {currentFlashcard.russianWord}\n                                        </span>              \n                                    </div>\n                                )}    \n                            </div>\n                        </Col>\n                    </Row>     \n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"english-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    English\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              disabled={ true }\n                                              value={this.state.englishInput}\n                                              placeholder='English' />\n                            </Form.Group> \n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"russian-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    русский\n                                </Form.Label>\n                                <Form.Control type=\"text\" placeholder='русский'\n                                              disabled={ true }\n                                              value={this.state.cyrillicInput}/>                                           \n                            </Form.Group>\n                        </Col>                                                   \n                    </Row>\n                    <Row>\n                        <Col className=\"buttons__actions\">\n                            <Button variant=\"primary\" \n                                    type=\"submit\"\n                                    disabled={this.state.englishInput === '' ||\n                                              this.state.cyrillicInput === ''}\n                                    className=\"button__action\">\n                            Delete Flashcard / Удалить карточк\n                            </Button>\n                                <Button variant=\"primary\" className=\"button__action\"\n                                    onClick={() => this.props.history.push('/options')}>\n                                Return / вернуться\n                            </Button>   \n                        </Col>\n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default DeleteFlashcardView\n\n","////////////////////////////////////////////////////////////////////////////////\n//\n// update-flashcard-view-component.jsx\n//\n// This React component implements the update flashcard view of the Russian\n// Flashcards application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport CyrillicKeyboard from '../cyrillic-keyboard/cyrillic-keyboard-component';\n\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\nimport './flashcards-views.scss'\n\n\n\n\n// Implements the Update Flashcard view.\nclass UpdateFlashcardView extends Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        \n        super();\n\n        this.state = {\n            cyrillicInput: '',\n            englishInput: '',\n            flashcards: [],\n            disableCyrillicKeyboard: true\n        };\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();  \n        this.selectedFlashcard = null;      \n    }\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = async () => {\n        this.displayStatusMessageMethod(\n            'Update a Flashcard - select a flashcard to update');\n\n        try {\n            const response = \n                await this.dataModel.getAllFlashcards(store.user.token);\n\n            this.setState({flashcards: response.data.flashcards} );     \n        }   \n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    }      \n\n\n    // A callback method passed to the Cyrillic keyboard component that\n    // sets the state that represents a Russian word typed by the keyboard.\n    // It takes a Cyrillic character and adds it as a suffix to the state\n    // representing that word.\n    //\n    // cyrillicCharacter - a Cyrillic character typed by the CyrillicKeyboard\n    //                     component.\n    // \n    handleCyrillicKeyboardClick = cyrillicCharacter => {\n        \n        let newCyrillicInput ;\n\n        // If we received the backspace character, then simply remove the \n        // last character from the existing russian word. Otherwise,\n        // suffix the new character to the end of the input.\n        if (cyrillicCharacter === 'назад') {\n            newCyrillicInput = this.state.cyrillicInput.slice(0, -1);\n        }\n        else {\n            newCyrillicInput = this.state.cyrillicInput + cyrillicCharacter;\n        }\n        this.setState({\n            cyrillicInput: newCyrillicInput,\n        });\n    };\n\n\n    // This is a do-nothing handler for the Cyrillic keyboard. Because that\n    // keyboard is a softkeyboard, it does not raise an onChange event.\n    // But React wants an onChange event otherwise we receive this error in the\n    // JS console: Warning: Failed prop type: You provided a `value` prop to a\n    // form field without an `onChange` handler. This will render a read-only\n    // field. If the field should be mutable use `defaultValue`. Otherwise, set\n    // either `onChange` or `readOnly`.\n    handleEmptyCyrillicOnChange = () => {};    \n\n\n    // Handles changes in the English input text control.\n    //\n    // event - A React synthetic event that has changes to the\n    //         English input field.\n    handleEnglishKeyboardChange = event => {\n        this.setState({\n            englishInput: event.target.value\n        });\n    };\n\n\n    handleFlashcardSelected = event => {\n        \n        let selectedElement;\n        \n        // You can either click the SPAN or the parent DIV.\n        // Handle both cases.\n        if (event.target.tagName === 'SPAN') {\n            selectedElement = event.target.parentElement;\n        }\n        else {\n            selectedElement = event.target;\n        }\n\n        // This saves the flashcard database ID and the words.\n        // We need the ID when we save the updates.\n        this.selectedFlashcard = selectedElement;\n\n        // Our words are in a span element and appear as \n        // englishWord / russianWord.\n        const words = selectedElement.innerText.split('/');\n\n        console.log(words)\n        // Now use state databinding to load the words into the input fields.\n        this.setState({\n            englishInput: words[0].trim(),\n            cyrillicInput: words[1].trim()\n        });\n    };\n\n\n    handleOnBlur = event => {\n\n        let controlName = event.target.name;\n        let keyboardDisableState;\n        \n        if (controlName === \"english\") keyboardDisableState = false;\n        else keyboardDisableState = true;\n\n        this.setState({\n            disableCyrillicKeyboard: keyboardDisableState\n        });\n    };\n\n\n    handleOnFocus = event => {\n\n        let controlName = event.target.name;\n        let keyboardDisableState;\n\n        if (controlName === \"english\") keyboardDisableState = true;\n        else keyboardDisableState = false;\n\n        this.setState({ \n            disableCyrillicKeyboard: keyboardDisableState\n        })\n    };\n\n\n    // Handles the form submission which in turn invokes the web service to\n    // update a flashcard. \n\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n\n            const id = this.selectedFlashcard.id;\n\n            await this.dataModel.updateFlashcard(\n                id,\n                this.state.cyrillicInput,\n                this.state.englishInput,\n                store.user.token\n            );\n\n            // Loop through our flashcards and find the flashcard that was \n            // updated. We need to update it. Since it is in state, the \n            // list of flashcards should re-render.\n            //\n            // TODO: Make this more efficient.\n            const flashcards = this.state.flashcards;\n\n            for (let flashcard of flashcards) {\n\n                if (flashcard._id === id) {\n                    flashcard.englishWord = this.state.englishInput;\n                    flashcard.russianWord = this.state.cyrillicInput;\n                    break;\n                }\n            }\n\n            // This will cause the flashcards to re-render since the state of \n            // one of the flashcards has changed.\n            this.state.flashcards = flashcards;\n\n            this.displayStatusMessageMethod(\n                `The flashcard  - ${this.state.englishInput} / \n                ${this.state.cyrillicInput} -  was updated successfully`);    \n                \n            this.setState({\n                cyrillicInput: '',\n                englishInput: ''\n            });    \n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n        \n        return (\n            <section className=\"input__controls\">\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <Col>\n                            <div className=\"scrollable-flashcards\">\n                                {this.state.flashcards.map(currentFlashcard =>\n                                    <div key={ currentFlashcard._id }\n                                        //  Use the ID property to encode our flashcard so that we\n                                        // know which flashcard to update.\n                                        id={ currentFlashcard._id }\n                                        className=\"flashcard\"\n                                        onClick={this.handleFlashcardSelected}>\n                                        <span>\n                                            {currentFlashcard.englishWord} / {currentFlashcard.russianWord}\n                                        </span>              \n                                    </div>\n                                )}    \n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"english-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    English\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              disabled={ false }\n                                              name=\"english\"\n                                              onChange={\n                                                  this.handleEnglishKeyboardChange\n                                              }\n                                              onBlur={ this.handleOnBlur }\n                                              onFocus={ this.handleOnFocus }                                              \n                                              value={this.state.englishInput}\n                                              placeholder='English' />\n                            </Form.Group> \n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"russian-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    русский\n                                </Form.Label>\n                                <Form.Control type=\"text\" placeholder='русский'\n                                              disabled={ false }\n                                              name=\"russian\"\n                                              onFocus={ this.handleOnFocus }    \n                                              onChange={ this.handleEmptyCyrillicOnChange }\n                                              value={this.state.cyrillicInput}/>                                           \n                            </Form.Group>\n                        </Col>                                                   \n                    </Row>\n                    <Row>\n                        <Col>\n                            <CyrillicKeyboard disabled={ \n                                                this.state.disableCyrillicKeyboard\n                                              }\n                                              keyboardPressHandler={\n                                                this.handleCyrillicKeyboardClick\n                                              } />                            \n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"buttons__actions\">\n                            <Button variant=\"primary\"\n                                    type=\"submit\"\n                                    disabled={this.state.englishInput === '' ||\n                                              this.state.cyrillicInput === ''}\n                                    className=\"button__action\">\n                                Update Flashcard / Обновить карточку\n                            </Button>\n                                <Button variant=\"primary\" className=\"button__action\"\n                                    onClick={() => this.props.history.push('/options')}>\n                                Return / вернуться\n                            </Button>   \n                        </Col>\n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default UpdateFlashcardView\n\n","////////////////////////////////////////////////////////////////////////////////\n//\n// view-flashcards-view-component.jsx\n//\n// This React component implements the view flashcards view of the Russian\n// Flashcards application. \n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport CyrillicKeyboard from '../cyrillic-keyboard/cyrillic-keyboard-component';\nimport store from './../../store';\nimport FlashcardsDataModel from './../../models/data-model';\n\nimport './flashcards-views.scss'\n\n\n\n\n// Implements the view Flashcard view.\n//\nclass ViewFlashcardsView extends Component {\n\n    constructor({displayStatusMessageMethod, history}) {\n        \n        super();\n\n        // The state for this view.\n        //\n        // englishInput - The input text field value for English.\n        // cyrillicInput - The input text field value for Russian.\n        // selectedLanguage - The currently selected radio button\n        //                    for the input language.\n        // startButtonDisabled - When true, the start button is disabled.\n        // checkButtonDisabled - When true, the check button is disabled.\n        // nextButtonDisabled - When true, the next button is disabled.\n        // radioButtonsDisabled - When true, the radio buttons are disabled.\n        this.state = {\n            cyrillicInput: '',\n            englishInput: '',\n            selectedLanguage: 'english',\n            startButtonDisabled: false,\n            checkButtonDisabled: true,\n            nextButtonDisabled: true,\n            radioButtonsDisabled: false\n        };\n\n        this.history = history;\n        this.displayStatusMessageMethod = displayStatusMessageMethod;\n        this.dataModel = new FlashcardsDataModel();\n        this.flashcards = [];\n        this.flashcardNumberCurrentlyShown = 0;\n    };\n\n\n    // A React.js lifecycle method that is invoked immediately after a\n    // component is mounted (inserted into the tree). \n    //\n    componentDidMount = () => {\n        this.displayStatusMessageMethod(\n            'View flashcards - Select an input language and then select \"Start\"');\n    };\n    \n\n    // Handles the check button click that checks whether the English word\n    // is the correct translation for the Russian word. it also sets \n    // state so that button state for check and next is correct.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleCheckAnswerButton = (event) => {\n        event.preventDefault();\n\n        if ((this.state.englishInput === \n                this.flashcards[this.flashcardNumberCurrentlyShown].englishWord) &&\n            (this.state.cyrillicInput === \n                this.flashcards[this.flashcardNumberCurrentlyShown].russianWord)) {\n\n                this.displayStatusMessageMethod(\n                    `Correct: < ${this.state.englishInput} > is < ${this.state.cyrillicInput} >.` +\n                    \" Change the input language and/or select 'Next'\");\n                \n                this.setState( {\n                    checkButtonDisabled: true,\n                    nextButtonDisabled: false,\n                    radioButtonsDisabled: false    \n                });\n        }\n        else {\n            this.displayStatusMessageMethod(\n                \"Your answer is not correct. Please try again or select 'Next'.\"); \n                \n                this.setState( {\n                    checkButtonDisabled: false,\n                    nextButtonDisabled: false,\n                    radioButtonsDisabled: true    \n                });                \n        }\n    }; \n    \n\n    // A callback method passed to the Cyrillic keyboard component that\n    // sets the state that represents a Russian word typed by the keyboard.\n    // It takes a Cyrillic character and adds it as a suffix to the state\n    // representing that word.\n    //\n    // cyrillicCharacter - a Cyrillic character typed by the CyrillicKeyboard\n    //                     component.\n    // \n    handleCyrillicKeyboardClick = cyrillicCharacter => {\n        \n        let newCyrillicInput ;\n\n        // If we received the backspace character, then simply remove the \n        // last character from the existing russian word. Otherwise,\n        // suffix the new character to the end of the input.\n        if (cyrillicCharacter === 'назад') {\n            newCyrillicInput = this.state.cyrillicInput.slice(0, -1);\n        }\n        else {\n            newCyrillicInput = this.state.cyrillicInput + cyrillicCharacter;\n        }\n        this.setState({\n            cyrillicInput: newCyrillicInput,\n            checkButtonDisabled: this.shouldCheckButtonBeDisabled()\n        });\n    };\n\n\n    // Handles changes in the English input text control. This is required \n    // since the input control is \"controlled\" by React since it is bound to\n    // state.\n    //\n    // event - A React synthetic event that has changes to the\n    //         English input field.\n    //\n    handleEnglishKeyboardChange = event => {\n\n        this.setState({\n            englishInput: event.target.value,\n            checkButtonDisabled: this.shouldCheckButtonBeDisabled()\n        });\n    };\n\n\n    // Handles the next button click that loads the next entry in the \n    // list of flasccards. It also sets the appropriate disabled\n    // state for the start and check buttons, as well as itself.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //    \n    handleNextButton = (event) => {\n        event.preventDefault();\n\n        this.flashcardNumberCurrentlyShown++;\n\n        if (this.flashcardNumberCurrentlyShown < this.flashcards.length) {\n            \n            // It is easiet to just cler both fields and overwrite them to reduce\n            // logic in the code.\n            this.setState({cyrillicInput: '', englishInput: ''});\n\n            let currentEnglishWord = \n                this.flashcards[this.flashcardNumberCurrentlyShown].englishWord;\n            let currentRussianWord = \n                this.flashcards[this.flashcardNumberCurrentlyShown].russianWord;    \n        \n            let statusMessage;\n\n            if (this.state.selectedLanguage === 'english') {\n                this.setState({\n                    cyrillicInput: currentRussianWord\n                });\n\n                statusMessage =\n                    `What is the English word for ${currentRussianWord}?`;\n            }   \n            else if (this.state.selectedLanguage === 'russian') {\n                this.setState({\n                    englishInput: currentEnglishWord\n                });\n\n                statusMessage =\n                    `What is the Russian word for ${currentEnglishWord}?`;\n            } \n\n            this.displayStatusMessageMethod(statusMessage);    \n            \n            this.setState({\n                radioButtonsDisabled: true              \n            });            \n        }\n        else {\n            this.displayStatusMessageMethod(\n                    \"No more cards. Select 'Start' to\" +\n                    \" view again or select 'Return' to exit to options\");\n            \n            this.setState({\n                startButtonDisabled: false,\n                checkButtonDisabled: true,\n                nextButtonDisabled: true,  \n                radioButtonsDisabled: false              \n            });\n        }\n                \n        this.setState( {\n            checkButtonDisabled: true,\n            nextButtonDisabled: true    \n        });              \n\n    };\n\n\n    // Handles the radio buttons which determine which language we are using\n    // for our flashcard guess. This sets the selectedLanguage state .\n    //\n    // event- A React synthetic event.\n    // \n    handleLanguageOptionChange = event => {\n\n        this.setState({\n            cyrillicInput: '',\n            englishInput: '',\n            selectedLanguage: event.target.value\n        });\n    };\n\n\n    // Handles the form submission which in turn invokes the web service to\n    // get all flashcards and load the first flashcard into the view.\n    //\n    // event - A React synthetic event that represents the form submission.\n    //\n    handleSubmit = async (event) => {\n        event.preventDefault();\n\n        try {\n            const response = \n                await this.dataModel.getAllFlashcards(store.user.token);\n\n            this.flashcards = response.data.flashcards;\n\n            if (this.flashcards.length === 0) {\n                \n                this.displayStatusMessageMethod(\n                    \"There are no flashcards. You must create at least one flashcard to view them\");\n                    \n                return;    \n            }\n           \n            this.flashcardNumberCurrentlyShown = 0;    \n\n            let currentEnglishWord = \n                this.flashcards[this.flashcardNumberCurrentlyShown].englishWord;\n\n            let currentRussianWord = \n                this.flashcards[this.flashcardNumberCurrentlyShown].russianWord;  \n\n            let statusMessage;\n              \n            if (this.state.selectedLanguage === 'english') {\n                this.setState({\n                    cyrillicInput: currentRussianWord,\n                    englishInput: ''\n                });\n\n                statusMessage =\n                    `What is the English word for ${currentRussianWord}?`;\n            }   \n            else if (this.state.selectedLanguage === 'russian') {\n                this.setState({\n                    cyrillicInput: '',\n                    englishInput: currentEnglishWord\n                });\n\n                statusMessage =\n                    `What is the Russian word for ${currentEnglishWord}?`;\n            } \n\n            this.displayStatusMessageMethod(statusMessage); \n\n            this.setState({\n                startButtonDisabled: true,\n                radioButtonsDisabled: true\n             });\n        }\n        catch(exception) {\n            this.displayStatusMessageMethod(exception.message);\n        }\n    };\n\n\n    // Determines the condition by which the check button is disabled. The\n    // button should only be enabled when both the English and Russian\n    // input fields are populated.\n    //\n    shouldCheckButtonBeDisabled = () => {\n\n        let buttonState = false;\n\n        if (this.state.englishInput === '' ||\n            this.state.cyrillicInput === '') {\n            \n            buttonState = true;                 \n        }\n\n        this.setState({ checkButtonDisabled: buttonState }); \n    };\n\n\n    // A React.js lifecycle method that renders the component.\n    //\n    render() {\n        \n        return (\n            <section className=\"input__controls\">\n                <Form onSubmit={this.handleSubmit}>\n                    <Row>\n                        <div className=\"form--centered\">\n                            <span id=\"span-language\">Language / Язык:</span>\n                            <Form.Check inline label=\"English\" type=\"radio\"\n                                        id='view-english' name=\"selectedLanguage\"\n                                        className=\"text-primary\"\n                                        disabled={ this.state.radioButtonsDisabled }\n                                        checked={\n                                            this.state.selectedLanguage === \"english\"\n                                        }\n                                        onChange={ this.handleLanguageOptionChange }\n                                        value=\"english\" />\n                            <Form.Check inline label=\"русский\" type=\"radio\"\n                                        id='view-russian' name=\"selectedLanguage\"\n                                        className=\"text-danger\"\n                                        disabled={ this.state.radioButtonsDisabled }\n                                        checked={\n                                            this.state.selectedLanguage === \"russian\"\n                                        }\n                                        onChange={ this.handleLanguageOptionChange }\n                                        value=\"russian\" />  \n                            <Button variant=\"primary\" \n                                    disabled={ this.state.startButtonDisabled }  \n                                    type=\"submit\"\n                                    className=\"button__action\">\n                                Start / Проверить\n                            </Button>                                                  \n                        </div>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"english-text\" >\n                                <Form.Label className=\"text-primary\">\n                                    English\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              disabled={\n                                                  this.state.selectedLanguage === 'russian'\n                                              }\n                                              onChange={ this.handleEnglishKeyboardChange }\n                                              value={ this.state.englishInput }\n                                              placeholder='English' />\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"russian-text\" >  \n                                <Form.Label className=\"text-danger\">\n                                    русский\n                                </Form.Label>\n                                <Form.Control type=\"text\" \n                                              placeholder='русский'\n                                              disabled={\n                                                  this.state.selectedLanguage === 'english'\n                                              }\n                                              value={this.state.cyrillicInput}/>                                           \n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <CyrillicKeyboard disabled={\n                                                this.state.selectedLanguage === 'english'\n                                              }\n                                              keyboardPressHandler={\n                                                  this.handleCyrillicKeyboardClick\n                                              } />                            \n                        </Col>                      \n                    </Row>\n                    <Row>\n                        <Col className=\"buttons__actions\">\n                            <Button variant=\"primary\" \n                                    disabled={ this.state.checkButtonDisabled }\n                                    onClick={ this.handleCheckAnswerButton }\n                                    className=\"button__action\">\n                                Check / Проверить\n                            </Button>\n                            <Button variant=\"primary\"\n                                    disabled={ this.state.nextButtonDisabled }\n                                    onClick={ this.handleNextButton } \n                                    className=\"button__action\">\n                                Next / Следующая карточка\n                            </Button>    \n                            <Button variant=\"primary\" className=\"button__action\"\n                                    onClick={ \n                                        () => this.props.history.push('/options')\n                                    }>\n                                Return / вернуться\n                            </Button> \n                        </Col>\n                    </Row>\n                </Form>\n            </section>\n        );\n    }\n}\n\n\nexport default ViewFlashcardsView","////////////////////////////////////////////////////////////////////////////////\n//\n// App.js\n//\n// This defines the application component. It drives the Russian Flashcards\n// app.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\n\nimport StatusMessages from\n  './components/status-messages/status-messages-component';\nimport HomeView from './components/home-view/home-view-component';\nimport SignupView from './components/signup-view/signup-view-component';\nimport SigninView from './components/signin-view/signin-view-component';\nimport ChangePasswordView from\n  './components/change-password-view/change-password-view-component';\nimport OptionsView from './components/options-view/options-view-component';\nimport CreateFlashcardView from\n  './components/flashcards-views/create-flashcard-view-component';\nimport DeleteFlashcardView from\n  './components/flashcards-views/delete-flashcard-view-component';\nimport UpdateFlashcardView from\n  './components/flashcards-views/update-flashcard-view-component';\nimport ViewFlashcardsView from\n  './components/flashcards-views/view-flashcards-view-component';\n\nimport './App.scss';\n\n\n\n\n// Implements the main Russian Flascard application.\n//\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      // The intial message displayed in the status message area when the \n      // application begins. The initial message is a stub / placeholder \n      // for views to display the messages meaningful to them.\n      message: 'Stub message.'\n    };\n  };\n\n\n  // A callback function for child components in order to write status messages\n  // to the StatusMessage component. This alters state which will cause a \n  // render to occur.\n  //\n  // message- The message to be written to the StatusMessage component.\n  //\n  displayStatusMessage = message => {\n    this.setState({message: message});\n  };\n\n\n  // A React.js lifecycle method that renders the component.\n  //\n  render() {\n    return (\n      <main>\n        <Route path='/' render={ () => {\n          return (\n            <StatusMessages message={this.state.message}/>\n          );\n        }} />\n        <Route exact path='/' render={ ({history}) => {\n          return (\n            <HomeView displayStatusMessageMethod={this.displayStatusMessage}\n                      history={history} />\n         );\n        }} />\n        <Route exact path='/signup' render={ ({history}) => {\n          return (\n            <SignupView displayStatusMessageMethod={this.displayStatusMessage}\n                        history={history} />\n         );\n        }} />        \n        <Route exact path='/signin' render={ ({history}) => {\n          return (\n            <SigninView displayStatusMessageMethod={this.displayStatusMessage}\n                        history={history} />\n         );\n        }} /> \n        <Route exact path='/change-password' render={ ({history}) => {\n          return (\n            <ChangePasswordView displayStatusMessageMethod={this.displayStatusMessage}\n                                history={history} />\n         );\n        }} />                \n        <Route exact path='/options' render={ ({history}) => {\n          return (\n            <OptionsView displayStatusMessageMethod={this.displayStatusMessage}\n                         history={history} />\n         );\n        }} />  \n        <Route exact path='/create-flashcard' render={ ({history}) => {\n          return (\n            <CreateFlashcardView displayStatusMessageMethod={this.displayStatusMessage}\n                                 history={history} />\n         );\n        }} />                        \n        <Route exact path='/delete-flashcard' render={ ({history}) => {\n          return (\n            <DeleteFlashcardView displayStatusMessageMethod={this.displayStatusMessage}\n                                 history={history} />\n         );\n        }} />   \n        <Route exact path='/update-flashcard' render={ ({history}) => {\n          return (\n            <UpdateFlashcardView displayStatusMessageMethod={this.displayStatusMessage}\n                                 history={history} />\n         );\n        }} />          \n        <Route exact path='/view-flashcards' render={ ({history}) => {\n          return (\n            <ViewFlashcardsView displayStatusMessageMethod={this.displayStatusMessage}\n                                history={history} />\n         );\n        }} />              \n      </main>      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.scss';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}